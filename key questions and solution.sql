SELECT
	*
FROM
	PIZZA
SELECT
	*
FROM
	PIZZA_TYPE
SELECT
	*
FROM
	ORDERS
SELECT
	*
FROM
	ORDER_DETAIL BASIC:
	--Basic
	1--Retrieve the total number of orders placed.
	
SELECT
	COUNT(ORDER_ID)
FROM
	ORDERS
	2--Calculate the total revenue generated from pizza sales.
	
	SELECT
	SUM(P.PRICE * OD.QUANTITY) AS REVENUE
FROM
	PIZZA P
	JOIN ORDER_DETAIL OD ON P.PIZZA_ID = OD.PIZZA_ID
	
	3--Identify the highest-priced pizza.
	
SELECT
	MAX(PRICE) AS HIGHEST_PRICE,
	NAME
FROM
	PIZZA P
	JOIN PIZZA_TYPE PT ON P.PIZZA_TYPE = PT.PIZZA_TYPE_ID
GROUP BY
	PT.NAME
ORDER BY
	HIGHEST_PRICE DESC
LIMIT
	1
	
	4--Identify the most common pizza size ordered.
	
SELECT
	P.SIZE,
	COUNT(OD.ORDER_DETAIL_ID) AS NUM_ORDER
FROM
	PIZZA P
	JOIN ORDER_DETAIL OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY
	P.SIZE
ORDER BY
	NUM_ORDER DESC
	
	5--List the top 5 most ordered pizza types along with their quantities.
	
SELECT
	PT.NAME,
	SUM(OD.QUANTITY) AS TOTAL
FROM
	PIZZA P
	JOIN PIZZA_TYPE PT ON P.PIZZA_TYPE = PT.PIZZA_TYPE_ID
	JOIN ORDER_DETAIL OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY
	PT.NAME
ORDER BY
	TOTAL DESC
LIMIT
	5 
	--Intermediate:
	6--JOIN THE NECESSARY TABLES TO FIND THE TOTAL QUANTITY OF EACH PIZZA CATEGORY ORDERED.SELECT SUM(OD.QUANTITY), PT.CATEGORY
FROM
	PIZZA_TYPE PT
	JOIN PIZZA P ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE
	JOIN ORDER_DETAIL OD ON OD.PIZZA_ID = P.PIZZA_ID
GROUP BY
	PT.CATEGORY
	
	7--Determine the distribution of orders by hour of the day.
	
SELECT
	EXTRACT(
		HOUR
		FROM
			TIME
	) TIME_DAY,
	COUNT(ORDER_ID) AS ORDERS_DAY
FROM
	ORDERS
GROUP BY
	TIME_DAY
	JOIN RELEVANT TABLES TO FIND THE CATEGORY - WISE DISTRIBUTION OF PIZZAS.SELECT COUNT(NAME),
	CATEGORY
FROM
	PIZZA_TYPE
GROUP BY
	CATEGORY
	
	8--Group the orders by date and calculate the average number of pizzas ordered per day.
	
WITH
	DAILLY_PIZZA AS (
		SELECT
			O.DATE,
			SUM(OD.QUANTITY) AS AVG_QUATITY
		FROM
			ORDERS O
			JOIN ORDER_DETAIL OD ON O.ORDER_ID = OD.ORDER_ID
		GROUP BY
			O.DATE
	)
SELECT
	AVG(AVG_QUATITY)
FROM
	DAILLY_PIZZA;

	9--Determine the top 3 most ordered pizza types based on revenue.
	
SELECT
	SUM(P.PRICE * OD.QUANTITY) AS REVENUE,
	PT.NAME
FROM
	PIZZA P
	JOIN PIZZA_TYPE PT ON P.PIZZA_TYPE = PT.PIZZA_TYPE_ID
	JOIN ORDER_DETAIL OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY
	PT.NAME
ORDER BY
	REVENUE DESC
LIMIT
	3
	--Advanced:
	10--Calculate the percentage contribution of each pizza type to total revenue.
	--this is useing windows function
	
SELECT
	PT.CATEGORY,
	SUM(P.PRICE * OD.QUANTITY) / SUM(SUM(P.PRICE * OD.QUANTITY)) OVER () * 100
FROM
	PIZZA P
	JOIN PIZZA_TYPE PT ON P.PIZZA_TYPE = PT.PIZZA_TYPE_ID
	JOIN ORDER_DETAIL OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY
	PT.CATEGORY
	
	11--Analyze the cumulative revenue generated over time.  
	
WITH
	A AS (
		SELECT
			O.DATE,
			SUM(P.PRICE * OD.QUANTITY) AS DAILY_REVENUE
		FROM
			ORDER_DETAIL OD
			JOIN ORDERS O ON OD.ORDER_ID = O.ORDER_ID
			JOIN PIZZA P ON P.PIZZA_ID = OD.PIZZA_ID
		GROUP BY
			O.DATE
	)
SELECT
	DATE,
	ROUND(DAILY_REVENUE::NUMERIC, 2),
	ROUND(
		SUM(DAILY_REVENUE) OVER (
			ORDER BY
				DATE
		)::NUMERIC,
		2
	) AS CUMULATIVE_REVENUE
FROM
	A
ORDER BY
	DATE;

	13--Determine the top 3 most ordered pizza types based on revenue for each pizza category.
	
WITH
	ORDER_D AS (
		SELECT
			PT.CATEGORY,
			PT.NAME,
			SUM(P.PRICE * OD.QUANTITY) AS REVENUE
		FROM
			PIZZA P
			JOIN PIZZA_TYPE PT ON P.PIZZA_TYPE = PT.PIZZA_TYPE_ID
			JOIN ORDER_DETAIL OD ON OD.PIZZA_ID = P.PIZZA_ID
		GROUP BY
			PT.CATEGORY,
			PT.NAME
	),
	RANKED_PIZZA AS (
		SELECT
			NAME,
			CATEGORY,
			REVENUE,
			RANK() OVER (
				PARTITION BY
					CATEGORY
				ORDER BY
					REVENUE DESC
			) AS RN
		FROM
			ORDER_D
	)
SELECT
	NAME,
	CATEGORY,
	REVENUE,
	RN
FROM
	RANKED_PIZZA
WHERE
	RN <= 3